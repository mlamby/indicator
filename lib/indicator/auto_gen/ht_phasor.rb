# Ta-Lib function mapping class 
# Function: 'HT_PHASOR'
# Description: 'Hilbert Transform - Phasor Components'
# This file has been autogenerated - Do Not Edit.
class Indicator::AutoGen::HtPhasor < Indicator::Base

  def initialize(*args)
    
    @func = TaLib::Function.new("HT_PHASOR")
  end

  # Is price data required as an input
  def self.price_input?
    false
  end

  # The list of arguments
  def self.arguments
    [  ]
  end

  # The minimum set of inputs required
  def self.inputs
    [ :in_real ]
  end

  # The outputs generated by this function
  def self.outputs
    [ :out_in_phase, :out_quadrature ]
  end

  def run(in_real)
    len = map(in_real).length
    @func.in_real(0, map(in_real))


    out_in_phase = Array.new(len)
    @func.out_real(0, out_in_phase)
    out_quadrature = Array.new(len)
    @func.out_real(1, out_quadrature)
  
    @func.call(0, len - 1)

  {:out_in_phase => out_in_phase,
    :out_quadrature => out_quadrature}
  end
end
