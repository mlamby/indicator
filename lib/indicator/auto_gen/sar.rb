# Ta-Lib function mapping class 
# Function: 'SAR'
# Description: 'Parabolic SAR'
# This file has been autogenerated - Do Not Edit.
class Indicator::AutoGen::Sar < Indicator::Base
  # Acceleration Factor <Double>
  attr_accessor :acceleration_factor
  # AF Maximum <Double>
  attr_accessor :af_maximum

  def initialize(*args)
    if args.first.is_a? Hash
      h = args.first
      @acceleration_factor = h[:acceleration_factor] || 2.000000e-2
      @af_maximum = h[:af_maximum] || 2.000000e-1
    else
      @acceleration_factor = args[0] || 2.000000e-2 
      @af_maximum = args[1] || 2.000000e-1 
    end
    
    @func = TaLib::Function.new("SAR")
  end

  # Is price data required as an input
  def self.price_input?
    true
  end

  # The list of arguments
  def self.arguments
    [ :acceleration_factor, :af_maximum ]
  end

  # The minimum set of inputs required
  def self.inputs
    [ :high, :low ]
  end

  # The outputs generated by this function
  def self.outputs
    [ :out_real ]
  end

  def run(*args)
    o, h, l, c, v, len = map_ohlcv(self.class.inputs, *args)
    @func.in_price(0, o, h, l, c, v, nil)

    @func.opt_real(0, @acceleration_factor)
    @func.opt_real(1, @af_maximum)

    out_real = Array.new(len)
    @func.out_real(0, out_real)
  
    @func.call(0, len - 1)

    out_real
  end
end
