# Ta-Lib function mapping class 
# Function: 'STOCHF'
# Description: 'Stochastic Fast'
# This file has been autogenerated - Do Not Edit.
class Indicator::AutoGen::StochF < Indicator::Base
  # Fast-K Period <Integer>
  attr_accessor :fast_k_period
  # Fast-D Period <Integer>
  attr_accessor :fast_d_period
  # Fast-D MA <MA Type>
  attr_accessor :fast_d_ma

  def initialize(*args)
    if args.first.is_a? Hash
      h = args.first
      @fast_k_period = h[:fast_k_period] || 5
      @fast_d_period = h[:fast_d_period] || 3
      @fast_d_ma = h[:fast_d_ma] || 0
    else
      @fast_k_period = args[0] || 5 
      @fast_d_period = args[1] || 3 
      @fast_d_ma = args[2] || 0 
    end
    
    @func = TaLib::Function.new("STOCHF")
  end

  # Is price data required as an input
  def self.price_input?
    true
  end

  # The list of arguments
  def self.arguments
    [ :fast_k_period, :fast_d_period, :fast_d_ma ]
  end

  # The minimum set of inputs required
  def self.inputs
    [ :high, :low, :close ]
  end

  # The outputs generated by this function
  def self.outputs
    [ :out_fast_k, :out_fast_d ]
  end

  def run(*args)
    o, h, l, c, v, len = map_ohlcv(self.class.inputs, *args)
    @func.in_price(0, o, h, l, c, v, nil)

    @func.opt_int(0, @fast_k_period)
    @func.opt_int(1, @fast_d_period)
    @func.opt_int(2, @fast_d_ma)

    out_fast_k = Array.new(len)
    @func.out_real(0, out_fast_k)
    out_fast_d = Array.new(len)
    @func.out_real(1, out_fast_d)
  
    @func.call(0, len - 1)

  {:out_fast_k => out_fast_k,
    :out_fast_d => out_fast_d}
  end
end
