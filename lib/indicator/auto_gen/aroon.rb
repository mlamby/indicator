# Ta-Lib function mapping class 
# Function: 'AROON'
# Description: 'Aroon'
# This file has been autogenerated - Do Not Edit.
class Indicator::AutoGen::Aroon < Indicator::Base
  # Time Period <Integer>
  attr_accessor :time_period

  def initialize(*args)
    if args.first.is_a? Hash
      h = args.first
      @time_period = h[:time_period] || 14
    else
      @time_period = args[0] || 14 
    end
    
    @func = TaLib::Function.new("AROON")
  end

  # Is price data required as an input
  def self.price_input?
    true
  end

  # The list of arguments
  def self.arguments
    [ :time_period ]
  end

  # The minimum set of inputs required
  def self.inputs
    [ :high, :low ]
  end

  # The outputs generated by this function
  def self.outputs
    [ :out_aroon_down, :out_aroon_up ]
  end

  def run(*args)
    o, h, l, c, v, len = map_ohlcv(self.class.inputs, *args)
    @func.in_price(0, o, h, l, c, v, nil)

    @func.opt_int(0, @time_period)

    out_aroon_down = Array.new(len)
    @func.out_real(0, out_aroon_down)
    out_aroon_up = Array.new(len)
    @func.out_real(1, out_aroon_up)
  
    @func.call(0, len - 1)

  {:out_aroon_down => out_aroon_down,
    :out_aroon_up => out_aroon_up}
  end
end
