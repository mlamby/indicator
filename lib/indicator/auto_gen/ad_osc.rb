# Ta-Lib function mapping class 
# Function: 'ADOSC'
# Description: 'Chaikin A/D Oscillator'
# This file has been autogenerated - Do Not Edit.
class Indicator::AutoGen::AdOsc < Indicator::Base
  # Fast Period <Integer>
  attr_accessor :fast_period
  # Slow Period <Integer>
  attr_accessor :slow_period

  def initialize(*args)
    if args.first.is_a? Hash
      h = args.first
      @fast_period = h[:fast_period] || 3
      @slow_period = h[:slow_period] || 10
    else
      @fast_period = args[0] || 3 
      @slow_period = args[1] || 10 
    end
    
    @func = TaLib::Function.new("ADOSC")
  end

  # Is price data required as an input
  def self.price_input?
    true
  end

  # The list of arguments
  def self.arguments
    [ :fast_period, :slow_period ]
  end

  # The minimum set of inputs required
  def self.inputs
    [ :high, :low, :close, :volume ]
  end

  # The outputs generated by this function
  def self.outputs
    [ :out_real ]
  end

  def run(*args)
    o, h, l, c, v, len = map_ohlcv(self.class.inputs, *args)
    @func.in_price(0, o, h, l, c, v, nil)

    @func.opt_int(0, @fast_period)
    @func.opt_int(1, @slow_period)

    out_real = Array.new(len)
    @func.out_real(0, out_real)
  
    @func.call(0, len - 1)

    out_real
  end
end
